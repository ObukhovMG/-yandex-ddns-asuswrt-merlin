#!/bin/sh
# Bash script for updating Yandex DNS records with Merlin's asuswrt firmware. Place this file under /jffs/scripts and run 'chmod u+x ddns-start'

# Yandex DNS API 360
# Api ref https://yandex.ru/dev/api360/doc/ref/index.html

# Create app https://oauth.yandex.ru/
# Code request https://yandex.ru/dev/id/doc/dg/oauth/reference/auto-code-client.html#auto-code-client__get-code
# Exchange code to access token https://yandex.ru/dev/id/doc/dg/oauth/reference/auto-code-client.html#auto-code-client__get-token

# SETTINGS
access_token=SET_YOUR_ACCESS_TOKEN_HERE
organization=SET_YOUR_ORGANIZATION_ID_HERE
domain=SET_YOUR_DOMAIN_NAME_HERE
ttl=26000
# Use ; symbol to delimite excluded hosts
exclude_host_list=

result=true
ip=${1} # Passed by the router

validate_ip() {
    echo "$1" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'
}

# Detect IP if not passed
if [ -z "$ip" ]; then
    echo "No IP passed, trying to fetch from 2ip.ru"
    logger -t "[DDNS]" "No IP passed, trying to fetch from 2ip.ru"
    ip=$(curl -fs4 https://2ip.ru/)
    if [ $? -ne 0 ]; then
        echo "Error getting IP via 2ip.ru"
        logger -t "[DDNS]" "Error getting IP via 2ip.ru"
        /sbin/ddns_custom_updated 0
        exit 0
    fi

    if ! validate_ip "$ip"; then
        echo "Invalid IP address: $ip"
        logger -t "[DDNS]" "Invalid IP address: $ip"
        /sbin/ddns_custom_updated 0
        exit 0
    fi

    echo "Got IP from 2ip.ru: $ip"
    logger -t "[DDNS]" "Got IP from 2ip.ru: $ip"
else
    echo "IP passed: $ip"
    logger -t "[DDNS]" "IP passed: $ip"
fi

# Fetch DNS records
queryRecords=$(curl -4 -s -H "Authorization: OAuth $access_token" \
    "https://api360.yandex.net/directory/v1/org/$organization/domains/$domain/dns")

# Log the full response from Yandex API
echo "API Response: $queryRecords"
logger -t "[DDNS]" "API Response: $queryRecords"

# Check for authorization error (Unauthorized)
if echo "$queryRecords" | grep -q '"code":16'; then
    echo "Authorization error: Unauthorized (code 16)"
    logger -t "[DDNS]" "Authorization error: Unauthorized (code 16)"
    /sbin/ddns_custom_updated 0
    exit 0
fi

if [ $? -ne 0 ] || [ -z "$queryRecords" ]; then
    echo "Error fetching DNS records from Yandex API. Response was empty or invalid."
    logger -t "[DDNS]" "Error fetching DNS records from Yandex API. Response was empty or invalid."
    /sbin/ddns_custom_updated 0
    exit 0
fi

queryRecords=$(echo "$queryRecords" | jq -c '.records' 2>/dev/null)
if [ $? -ne 0 ] || [ -z "$queryRecords" ]; then
    echo "Error parsing JSON from Yandex API."
    logger -t "[DDNS]" "Error parsing JSON from Yandex API."
    /sbin/ddns_custom_updated 0
    exit 0
fi

# Log the fetched DNS records
echo "Fetched DNS records: $queryRecords"
logger -t "[DDNS]" "Fetched DNS records: $queryRecords"

# Update DNS records
echo "$queryRecords" | jq -c '.[]' | while read record; do
    recordId=$(echo "$record" | jq -r '.recordId')
    type=$(echo "$record" | jq -r '.type')
    rName=$(echo "$record" | jq -r '.name')
    rTTL=$(echo "$record" | jq -r '.ttl')
    rTTL=${rTTL:-26000}

    if [ "$type" != "A" ]; then
        continue
    fi

    # Check if the record is in the exclude list
    if echo "$exclude_host_list" | tr ';' '\n' | grep -qx "$rName"; then
        echo "Skipping record $rName (excluded)"
        logger -t "[DDNS]" "Skipping record $rName (excluded)"
        continue
    fi

    # Prepare the JSON request body
    json=$(jq -c -n --arg ad "$ip" --arg nm "$rName" --arg tl "$rTTL" \
        '{address: $ad, name: $nm, ttl: $tl}')

    # Log the sent request
    echo "Sending request for record $rName with IP $ip: $json"
    logger -t "[DDNS]" "Sending request for record $rName with IP $ip: $json"

    # Send the update request to Yandex API and capture HTTP code and response body
    api_response=$(curl -4 -s -w "%{http_code}" -o /tmp/ddns_api_response.txt \
        -H "Authorization: OAuth $access_token" \
        -H "Content-Type: application/json" \
        -d "$json" \
        -X POST "https://api360.yandex.net/directory/v1/org/$organization/domains/$domain/dns/$recordId")

    # Log the HTTP response code and the full response body
    http_code=$(echo "$api_response" | tail -n1)
    response_body=$(cat /tmp/ddns_api_response.txt)

    echo "API Response for record $rName: HTTP code $http_code"
    logger -t "[DDNS]" "API Response for record $rName: HTTP code $http_code"

    echo "API Response Body for record $rName: $response_body"
    logger -t "[DDNS]" "API Response Body for record $rName: $response_body"

    if [ "$http_code" -ne 200 ]; then
        echo "Failed to update record $rName. HTTP code: $http_code"
        logger -t "[DDNS]" "Failed to update record $rName. HTTP code: $http_code"
        result=false
    else
        echo "Record $rName updated successfully."
        logger -t "[DDNS]" "Record $rName updated successfully."
    fi
done

if [ "$result" = false ]; then
    echo "Error updating DNS records."
    logger -t "[DDNS]" "Error updating DNS records."
    /sbin/ddns_custom_updated 0
else
    echo "DNS records updated successfully."
    logger -t "[DDNS]" "DNS records updated successfully."
    /sbin/ddns_custom_updated 1
fi
